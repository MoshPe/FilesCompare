# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Build for Windows
      run: go build -o ${{ github.event.repository.name }}.exe
      
    - name: Build for Linux
      run: GOOS=linux GOARCH=amd64 go build -o ${{ github.event.repository.name }} 
      
    - name: Create Release - Windows
      id: create_release_windows
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v1.0.0
        release_name: Release v1.0.0 - ${{ github.event.repository.name }}
        body: |
            - Compare file via the CLI itself with --reference and given files as argument.
            - Compare files with a configuration files, utilizing patterns the subfolders.
        draft: false
        prerelease: false

    - name: Upload Release Asset - Windows
      id: upload_release_asset_windows
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release_windows.outputs.upload_url }}
        asset_path: ./${{ github.event.repository.name }}.exe
        asset_name: ${{ github.event.repository.name }}.exe
        asset_content_type: application/octet-stream
        
  build_macos:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Build for macOS
      run: GOOS=darwin GOARCH=amd64 go build -o ${{ github.event.repository.name }}

    - name: Create Release - macOS
      id: create_release_macos
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v1.0.0
        release_name: Release v1.0.0 - macOS
        draft: false
        prerelease: false

    - name: Upload Release Asset - macOS
      id: upload_release_asset_macos
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release_macos.outputs.upload_url }}
        asset_path: ./${{ github.event.repository.name }}
        asset_name: ${{ github.event.repository.name }}
        asset_content_type: application/octet-stream

  build_linux:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Build for Linux
      run: GOOS=linux GOARCH=amd64 go build -o ${{ github.event.repository.name }}

    - name: Create Release - Linux
      id: create_release_linux
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v1.0.0
        release_name: Release v1.0.0 - Linux
        draft: false
        prerelease: false

    - name: Upload Release Asset - Linux
      id: upload_release_asset_linux
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release_linux.outputs.upload_url }}
        asset_path: ./${{ github.event.repository.name }}
        asset_name: ${{ github.event.repository.name }}
        asset_content_type: application/octet-stream
